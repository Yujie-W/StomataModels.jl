var documenterSearchIndex = {"docs":
[{"location":"#StomtaModels.jl","page":"Home","title":"StomtaModels.jl","text":"","category":"section"},{"location":"#Use-StomataModels","page":"Home","title":"Use StomataModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Photosynthesis\njulia> using StomataModels\njulia> envir  = AirLayer{FT}();\njulia> ps_3   = C3CLM(FT);\njulia> leaves = Leaves{FT}(n_leaf=2);\njulia> sm     = OSMWang{FT}();\njulia>\njulia> gas_exchange!(ps_3, leaves, envir, sm);","category":"page"},{"location":"API/#StomtaModels-API","page":"API","title":"StomtaModels API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = StomataModels","category":"page"},{"location":"API/#Empirical-models","page":"API","title":"Empirical models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"empirical_equation\nempirical_equation(sm::BallBerrySM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::BallBerrySM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#StomataModels.empirical_equation","page":"API","title":"StomataModels.empirical_equation","text":"This function returns the stomatal conductance computed from empirical stomatal models. This is not the solution! Supported methods are for\n\nLeaf\nLeaves1D (ind=1 for sunlit, ind=2 for shaded leaves)\nLeaves2D (ind=NA for shaded, ind>1 for sunlit leaves)\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaf{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"API","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaf Leaf type struct\nair AirLayer type environmental conditions\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaves1D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"API","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaves Leaves1D type struct\nair AirLayer type environmental conditions\nind Leaf index (1 for sunlit and 2 for shaded)\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"API","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation for the shaded leaves of Leaves2D, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"API","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation for the sunlit leaves of Leaves2D, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nind Sunlit leaf index within the leaf angular distribution\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"API/#Optimality-models","page":"API","title":"Optimality models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"∂A∂E\n∂R∂E\n∂T∂E\n∂Θ∂E\n∂Θ∂E(sm::AndereggSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θₙ∂E","category":"page"},{"location":"API/#StomataModels.∂A∂E","page":"API","title":"StomataModels.∂A∂E","text":"∂A∂E(leaf::Leaf{FT}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n∂A∂E(leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int) where {FT<:AbstractFloat}\n∂A∂E(leaves::Leaves2D{FT}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n∂A∂E(leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int) where {FT<:AbstractFloat}\n\nReturn the partial derivative of A per E, given\n\nleaf Leaf type leaf\nair AirLayer type environmental conditions\nleaves Leaves1D, and Leaves2D type leaf\nind Index of the leaves (1 for sunlit and 2 for shaded for Leaves1D, all sunlit for Leaves2D)\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.∂R∂E","page":"API","title":"StomataModels.∂R∂E","text":"∂R∂E(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n\nReturns the marginal increase in leaf respiration rate per transpiration rate, given\n\nlf Leaf, Leaves1D, or Leaves2D type leaf\nair AirLayer type environmental conditions\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.∂T∂E","page":"API","title":"StomataModels.∂T∂E","text":"∂T∂E(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}, f_view::FT) where {FT<:AbstractFloat}\n\nReturns the marginal increase in leaf temperature per transpiration rate, given\n\nlf Leaf, Leaves1D, or Leaves2D type leaf\nair AirLayer type environmental conditions\nf_view Ratio that leaf area is exposed to external sources/sinks (not other leaves, e.g., 2/LAI for canopy on average)\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.∂Θ∂E","page":"API","title":"StomataModels.∂Θ∂E","text":"This function returns the marginal risk for stomatal opening. This function supports a variety of optimality models for\n\nLeaf\nLeaves1D (ind=1 for sunlit leaves, ind=2 for shaded leaves)\nLeaves2D (ind=NA for shaded leaves, ind>1 for sunlit leaves)\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaf{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaf Leaf type struct\nair AirLayer for environmental conditions\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaves1D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaf::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaves Leaves1D type struct\nair AirLayer for environmental conditions\nind Leaf index (1 for sunlit and 2 for shaded)\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaves Leaves2D type struct\nair AirLayer for environmental conditions\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaf Leaf type struct\nair AirLayer for environmental conditions\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂Θₙ∂E","page":"API","title":"StomataModels.∂Θₙ∂E","text":"This function returns the ∂Θₙ∂E for nocturnal stomatal opening. Currently this function only supports WangSM which has been published for the purpose of computing nocturnal stomatal conductance.     Supports to other optimality models will be added later when I am ready to test those.\n\n\n\n\n\n","category":"function"},{"location":"API/#Stomtal-conductance-limits","page":"API","title":"Stomtal conductance limits","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"limit_stomatal_conductance!","category":"page"},{"location":"API/#StomataModels.limit_stomatal_conductance!","page":"API","title":"StomataModels.limit_stomatal_conductance!","text":"limit_stomatal_conductance!(leaf::Leaf{FT}) where {FT<:AbstractFloat}\nlimit_stomatal_conductance!(leaves::Leaves1D{FT}) where {FT<:AbstractFloat}\nlimit_stomatal_conductance!(leaves::Leaves2D{FT}) where {FT<:AbstractFloat}\n\nLimit stomatal conductance for H₂O for\n\nleaf Leaf type struct\nleaves Leaves1D type struct\n\n\n\n\n\n","category":"function"},{"location":"API/#Prognostic-conductance","page":"API","title":"Prognostic conductance","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"∂g∂t\n∂g∂t(leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂g∂t(leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂gₙ∂t\nstomatal_conductance!\nstomatal_conductance!(spac::MonoElementSPAC{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nstomatal_conductance!(spac::MonoElementSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#StomataModels.∂g∂t","page":"API","title":"StomataModels.∂g∂t","text":"This function returns the stomatal conductance change slope. Supported functionalities are\n\nLeaf\nLeaves1D (ind=1 for sunlit, ind=2 for shaded leaves)\nLeaves2D (ind=NA for shaded, ind>1 for sunlit leaves)\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaf{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂g∂t","text":"∂g∂t(leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaf Leaf type struct\nair AirLayer type environmental conditions\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaves1D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂g∂t","text":"∂g∂t(leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaves Leaves1D type struct\nair AirLayer type environmental conditions\nind Leaf index (1 for sunlit and 2 for shaded)\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂g∂t","text":"∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"API","title":"StomataModels.∂g∂t","text":"∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nind Sunlit leaf index within the leaf angular distribution\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.∂gₙ∂t","page":"API","title":"StomataModels.∂gₙ∂t","text":"∂gₙ∂t(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nlf Leaf, Leaves1D, or Leaves2D type struct\nair AirLayer type environmental conditions\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.stomatal_conductance!","page":"API","title":"StomataModels.stomatal_conductance!","text":"This function updates stomatal conductance for H₂O and CO₂. Supported functionalities are\n\nUpdate conductance for H₂O prognostically\nUpdate conductance for CO₂ based on that for H₂O\n\n\n\n\n\n","category":"function"},{"location":"API/#StomataModels.stomatal_conductance!-Union{Tuple{ClimaCache.MonoElementSPAC{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"StomataModels.stomatal_conductance!","text":"stomatal_conductance!(spac::MonoElementSPAC{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nstomatal_conductance!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate marginal stomatal conductance, given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type struct\nβ Tuning factor\n\n\n\n\n\n","category":"method"},{"location":"API/#StomataModels.stomatal_conductance!-Union{Tuple{FT}, Tuple{ClimaCache.MonoElementSPAC{FT}, FT}} where FT<:AbstractFloat","page":"API","title":"StomataModels.stomatal_conductance!","text":"stomatal_conductance!(spac::MonoElementSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}\nstomatal_conductance!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}, Δt::FT) where {FT<:AbstractFloat}\n\nUpdate marginal stomatal conductance, given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type struct\nΔt Time step length [s]\n\n\n\n\n\n","category":"method"}]
}
